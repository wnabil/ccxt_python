# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.pionex import ImplicitAPI
import hashlib
from ccxt.base.types import Any, Balances, Int, Market, Num, Order, OrderBook, OrderRequest, OrderSide, OrderType, Str, Strings, Ticker, Tickers, Trade
from typing import List
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidAddress
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import DuplicateOrderId
from ccxt.base.errors import DDoSProtection
from ccxt.base.decimal_to_precision import TICK_SIZE


class pionex(Exchange, ImplicitAPI):

    def describe(self):
        return self.deep_extend(super(pionex, self).describe(), {
            'id': 'pionex',
            'name': 'Pionex',
            'countries': ['EU'],
            'rateLimit': 100,
            'version': 'v1',
            'has': {
                'CORS': None,
                'spot': True,
                'margin': None,
                'swap': None,
                'future': None,
                'option': None,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'cancelOrders': False,
                'closeAllPositions': False,
                'closePosition': False,
                'createDepositAddress': False,
                'createMarketOrder': True,
                'createOrder': True,
                'createOrders': False,  # TODO
                'createPostOnlyOrder': True,
                'createReduceOnlyOrder': False,
                'createStopLimitOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'fetchAccounts': False,
                'fetchBalance': True,
                'fetchBorrowInterest': False,
                'fetchBorrowRateHistory': False,
                'fetchClosedOrders': False,
                'fetchCrossBorrowRate': False,
                'fetchCrossBorrowRates': False,
                'fetchDeposit': False,
                'fetchDepositAddress': False,
                'fetchDepositAddresses': False,
                'fetchDepositAddressesByNetwork': False,
                'fetchDeposits': False,
                'fetchDepositsWithdrawals': False,
                'fetchFundingHistory': False,
                'fetchFundingRate': False,
                'fetchFundingRateHistory': False,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchIsolatedBorrowRate': False,
                'fetchIsolatedBorrowRates': False,
                'fetchLedger': False,
                'fetchLedgerEntry': False,
                'fetchLeverageTiers': False,
                'fetchMarketLeverageTiers': False,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyTrades': True,
                'fetchOHLCV': False,
                'fetchOpenInterest': False,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrderBooks': True,
                'fetchOrders': True,
                'fetchOrderTrades': True,
                'fetchPosition': False,
                'fetchPositionHistory': False,
                'fetchPositionMode': False,
                'fetchPositions': False,
                'fetchPositionsForSymbol': False,
                'fetchPositionsHistory': False,
                'fetchPositionsRisk': False,
                'fetchPremiumIndexOHLCV': False,
                'fetchTicker': False,
                'fetchTickers': True,
                'fetchTrades': True,
                'fetchTradingLimits': False,
                'fetchTransactionFee': False,
                'fetchTransactionFees': False,
                'fetchTransactions': False,
                'fetchTransfers': False,
                'fetchWithdrawAddresses': False,
                'fetchWithdrawal': False,
                'fetchWithdrawals': False,
                'reduceMargin': False,
                'setLeverage': False,
                'setMargin': False,
                'setMarginMode': False,
                'setPositionMode': False,
                'signIn': False,
                'transfer': False,
                'withdraw': False,
            },
            'timeframes': {
                '1m': '1M',
                '5m': '5M',
                '15m': '15M',
                '30m': '30M',
                '1h': '60M',
                '4h': '4H',
                '8h': '8H',
                '12h': '12H',
                '1d': '1D',
            },
            'urls': {
                'api': {
                    'public': 'https://api.pionex.com',
                    'private': 'https://api.pionex.com',
                },
                'www': 'https://www.pionex.com/',
                'doc': 'https://pionex-doc.gitbook.io/apidocs',
                'fees': 'https://www.pionex.com/en/fees',
            },
            'api': {
                'public': {
                    'get': {
                        'common/symbols': 5,
                        'market/trades': 1,
                        'market/depth': 1,
                        'market/tickers': 1,
                        'market/bookTickers': 1,
                        'market/klines': 1,
                    },
                },
                'private': {
                    'get': {
                        'account/balances': 1,
                        'trade/order': 1,
                        'trade/orderByClientOrderId': 1,
                        'trade/openOrders': 5,
                        'trade/allOrders': 5,
                        'trade/fills': 5,
                        'trade/fillsByOrderId': 5,
                    },
                    'post': {
                        'trade/order': 1,
                        'trade/massOrder': 1,
                    },
                    'delete': {
                        'trade/order': 1,
                        'trade/allOrders': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'taker': self.parse_number('0.0005'),
                    'maker': self.parse_number('0.0005'),
                },
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'APIKEY_LOST': ArgumentsRequired,
                'SIGNATURE_LOST': ArgumentsRequired,
                'IP_NOT_WHITELISTED': InvalidAddress,
                'INVALIE_APIKEY': AuthenticationError,
                'INVALID_SIGNATURE': AuthenticationError,
                'APIKEY_EXPIRED': AuthenticationError,
                'INVALID_TIMESTAMP': BadRequest,
                'PERMISSION_DENIED': PermissionDenied,
                'TRADE_INVALID_SYMBOL': BadSymbol,
                'TRADE_PARAMETER_ERROR': BadRequest,
                'TRADE_NOT_ENOUGH_MONEY': InsufficientFunds,
                'TRADE_PRICE_FILTER_DENIED': BadRequest,
                'TRADE_SIZE_FILTER_DENIED': BadRequest,
                'TRADE_AMOUNT_FILTER_DENIED': BadRequest,
                'TRADE_REPEAT_CLIENT_ORDER_ID': DuplicateOrderId,
                'TRADE_OPEN_ORDER_EXCEED_LIMIT': DDoSProtection,
                'TRADE_OPERATION_DENIED': PermissionDenied,
                'TRADE_ORDER_NOT_FOUND': OrderNotFound,
            },
        })

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for pionex
        :see: https://pionex-doc.gitbook.io/apidocs/restful/common/market-data
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: an array of objects representing market data
        """
        response = self.publicGetCommonSymbols()
        # {
        #   "data": {
        #     "symbols":[
        #       {
        #         "symbol": "BTC_USDT",
        #         "type": "SPOT",
        #         "baseCurrency": "BTC",
        #         "quoteCurrency": "USDT",
        #         "basePrecision": 6,
        #         "quotePrecision": 2,
        #         "amountPrecision": 8,
        #         "minAmount": "10",
        #         "minTradeSize": "0.000001",
        #         "maxTradeSize": "1000",
        #         "minTradeDumping": "0.000001",
        #         "maxTradeDumping": "100",
        #         "enable": True,
        #         "buyCeiling": "1.1",
        #         "sellFloor": "0.9"
        #       }
        #     ]
        #   },
        #   "result": True,
        #   "timestamp": 1566676132311
        # }
        data = self.safe_value(response, 'data', {})
        markets = self.safe_value(data, 'symbols', [])
        return self.parse_markets(markets)

    def parse_market(self, market: dict) -> Market:
        #  {
        #    "symbol": "BTC_USDT",
        #    "type": "SPOT",
        #    "baseCurrency": "BTC",
        #    "quoteCurrency": "USDT",
        #    "basePrecision": 6,
        #    "quotePrecision": 2,
        #    "amountPrecision": 8,
        #    "minAmount": "10",
        #    "minTradeSize": "0.000001",
        #    "maxTradeSize": "1000",
        #    "minTradeDumping": "0.000001",
        #    "maxTradeDumping": "100",
        #    "enable": True,
        #    "buyCeiling": "1.1",
        #    "sellFloor": "0.9"
        #  }
        baseId = self.safe_string(market, 'baseCurrency')
        quoteId = self.safe_string(market, 'quoteCurrency')
        type = self.safe_string_lower(market, 'type')
        spot = type == 'spot'
        return {
            'symbol': baseId + '/' + quoteId,
            'id': self.safe_string(market, 'symbol'),
            'spot': spot,
            'type': type,
            'base': baseId,
            'quote': quoteId,
            'baseId': baseId,
            'quoteId': quoteId,
            'active': self.safe_bool(market, 'enable'),
            'maker': 0.0005,
            'taker': 0.0005,
            'limits': {
                'amount': {
                    'min': self.safe_number(market, 'minTradeSize'),
                    'max': self.safe_number(market, 'maxTradeSize'),
                },
            },
            'precision': {
                'amount': self.safe_number(market, 'amountPrecision'),
                'price': self.safe_number(market, 'basePrecision'),
                # 'qoute': self.safe_number(market, 'quotePrecision'),
            },
            'info': market,
            'contract': False,
            'contractSize': None,
            'created': None,
            'expiry': None,
            'expiryDatetime': None,
            'future': not spot,
            'inverse': None,
            'linear': None,
            'margin': False,
            'swap': False,
            'option': False,
            'optionType': None,
            'settle': None,
            'settleId': None,
            'strike': None,
        }

    def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        :see: https://pionex-doc.gitbook.io/apidocs/restful/markets/get-trades
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of trades
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = min(limit, 500)  # default 100, max 500
        response = self.publicGetMarketTrades(self.extend(request, params))
        # {
        #     "data": {
        #     "trades": [
        #         {
        #         "symbol": "BTC_USDT",
        #         "tradeId": "600848671",
        #         "price": "7962.62",
        #         "size": "0.0122",
        #         "side": "BUY",
        #         "timestamp": 1566691672311
        #     },
        #     {
        #         "symbol": "BTC_USDT",
        #         "tradeId": "600848670",
        #         "price": "7960.12",
        #         "size": "0.0198",
        #         "side": "BUY",
        #         "timestamp": 1566691672311
        #     }
        #     ]
        # },
        #     "result": True,
        #     "timestamp": 1566691672311
        # }
        data = self.safe_value(response, 'data', {})
        trades = self.safe_value(data, 'trades', [])
        return self.parse_trades(trades, market, since, limit)

    def parse_trade(self, trade: dict, market: Market = None) -> Trade:
        # publicGetMarketTrades
        # {
        #     "symbol": "BTC_USDT",
        #     "tradeId": "600848670",
        #     "price": "7960.12",
        #     "size": "0.0198",
        #     "side": "BUY",
        #     "timestamp": 1566691672311
        # }
        #
        # privateGetTradeFills
        # {
        #     "id": 9876543210,
        #     "orderId": 22334455,
        #     "symbol": "BTC_USDT",
        #     "side": "BUY",
        #     "role":  "TAKER",
        #     "price": "30000.00",
        #     "size": "0.1000",
        #     "fee":  "0.15",
        #     "feeCoin":  "USDT",
        #     "timestamp": 1566676132311
        #   },
        timestamp = self.safe_integer(trade, 'timestamp')
        return self.safe_trade({
            'info': trade,
            'id': self.safe_string_2(trade, 'tradeId', 'id'),
            'order': self.safe_string(trade, 'orderId'),
            'symbol': self.safe_string(trade, 'symbol').replace('_', '/'),
            'side': self.safe_string_lower(trade, 'side'),
            'type': self.safe_string_lower(trade, 'type'),
            'takerOrMaker': self.safe_string_lower(trade, 'role'),
            'price': self.safe_string(trade, 'price'),
            'amount': self.safe_string(trade, 'size'),
            'cost': None,
            'fee': {
                'cost': self.safe_string(trade, 'fee'),
                'currency': self.safe_currency_code(self.safe_string(trade, 'feeCoin')),
                'rate': None,
            },
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
        }, market)

    def fetch_order_book(self, symbol: str, limit: Int = None, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :see: https://pionex-doc.gitbook.io/apidocs/restful/markets/get-depth
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: A dictionary of order book structures
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = min(limit, 1000)  # default 20, max 1000
        response = self.publicGetMarketDepth(self.extend(request, params))
        # {
        # "data": {
        #     "bids": [
        #         ["29658.37", "0.0123"],
        #         ["29658.35", "1.1234"],
        #         ["29657.99", "2.2345"],
        #         ["29657.56", "6.3456"],
        #         ["29656.13", "8.4567"]
        #     ],
        #     "asks": [
        #         ["29658.47", "0.0345"],
        #         ["29658.65", "1.0456"],
        #         ["29658.89", "3.5567"],
        #         ["29659.43", "5.2678"],
        #         ["29659.98", "1.9789"]
        #     ]，
        #     "updateTime": 1566676132311
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        orderBook = self.safe_dict(response, 'data')
        return self.parse_order_book(orderBook, market['id'], None, 'bids', 'asks')

    def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Int = None, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :see: https://pionex-doc.gitbook.io/apidocs/restful/markets/get-klines
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int[][]: A list of candles ordered, open, high, low, close, volume
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if timeframe is not None:
            request['timeframe'] = self.timeframes[timeframe]
        if limit is not None:
            request['limit'] = min(limit, 500)  # default 100, max 500
        response = self.publicGetMarketKlines(self.extend(request, params))
        data = self.safe_dict(response, 'data', {})
        klines = self.safe_value(data, 'klines', [])
        # {
        # "result": True,
        # "data": {
        #     "klines": [
        #     {
        #         "time": 1691649240000,
        #         "open": "1851.27",
        #         "close": "1851.32",
        #         "high": "1851.32",
        #         "low": "1851.27",
        #         "volume": "0.542"
        #     }
        #     ]
        # },
        # "timestamp": 1691649271544
        # }
        return self.parse_ohlcvs(klines, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market: Market = None) -> list:
        # {
        #     "time": 1691649240000,
        #     "open": "1851.27",
        #     "close": "1851.32",
        #     "high": "1851.32",
        #     "low": "1851.27",
        #     "volume": "0.542"
        # }
        return [
            self.safe_integer(ohlcv, 'time'),  # timestamp
            self.safe_number(ohlcv, 'open'),  # open
            self.safe_number(ohlcv, 'high'),  # high
            self.safe_number(ohlcv, 'low'),  # low
            self.safe_number(ohlcv, 'close'),  # close
            self.safe_number(ohlcv, 'volume'),  # volume
        ]

    def fetch_tickers(self, symbols: Strings = None, params={}) -> Tickers:
        """
        fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        :see: https://pionex-doc.gitbook.io/apidocs/restful/markets/get-24hr-ticker
        :see: https://pionex-doc.gitbook.io/apidocs/restful/markets/get-book-ticker
        :param str[]|None symbols: unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a dictionary of ticker structures]
        """
        self.load_markets()
        request: dict = {
            'type': 'SPOT',
        }
        response = self.publicGetMarketTickers(self.extend(request, params))
        # {
        # "data": {
        #     "tickers": [
        #     {
        #         "symbol": "BTC_USDT",
        #         "time": 1545291675000,
        #         "open": "7962.62",
        #         "close": "7952.32",
        #         "high": "7971.61",
        #         "low": "7950.29",
        #         "volume": "1.537",
        #         "amount": "12032.56",
        #         "count": 271585
        #     },
        #     {
        #         "symbol": "ETH_USDT",
        #         "time": 1545291675000,
        #         "open": "1963.62",
        #         "close": "1852.22",
        #         "high": "1971.11",
        #         "low": "1850.23",
        #         "volume": "100.532",
        #         "amount": "112012.51",
        #         "count": 432211
        #     }
        #     ]
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        response2 = self.publicGetMarketBookTickers(self.extend(request, params))
        # {
        # "data": {
        #     "tickers": [
        #     ]
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        data = self.safe_dict(response, 'data', {})
        data2 = self.safe_dict(response2, 'data', {})
        tickers = self.safe_list(data, 'tickers', [])
        tickers2 = self.safe_list(data2, 'tickers', [])
        tickersFinal = []
        keys = self.keys(tickers)
        for i in range(0, len(keys)):
            tk = keys[i]
            ticker = tickers[tk]
            keys2 = self.keys(tickers)
            for j in range(0, len(keys2)):
                tk2 = keys[j]
                ticker2 = tickers2[tk2]
                if ticker2['symbol'] == ticker['symbol']:
                    tickersFinal.append(self.extend(ticker, ticker2))
        return self.parse_tickers(tickersFinal, symbols)

    def parse_ticker(self, ticker: dict, market: Market = None) -> Ticker:
        # {
        #     "symbol": "ETH_USDT",
        #     "time": 1545291675000,
        #     "open": "1963.62",
        #     "close": "1852.22",
        #     "high": "1971.11",
        #     "low": "1850.23",
        #     "volume": "100.532",
        #     "amount": "112012.51",
        #     "count": 432211
        # }
        timestamp = self.safe_number(ticker, 'time')
        return self.safe_ticker({
            'symbol': self.safe_string(ticker, 'symbol').replace('_', '/'),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_number(ticker, 'high'),
            'low': self.safe_number(ticker, 'low'),
            'open': self.safe_number(ticker, 'open'),
            'close': self.safe_number(ticker, 'close'),
            'baseVolume': self.safe_number(ticker, 'volume'),
            'info': ticker,
            'bid': self.safe_number(ticker, 'bidPrice'),
            'bidVolume': self.safe_number(ticker, 'bidSize'),
            'ask': self.safe_number(ticker, 'askPrice'),
            'askVolume': self.safe_number(ticker, 'askSize'),
            'vwap': None,
            'last': self.safe_string(ticker, 'last_price'),
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'quoteVolume': self.safe_string(ticker, 'quote_volume'),
        }, market)

    def fetch_balance(self, params={}) -> Balances:
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :see: https://pionex-doc.gitbook.io/apidocs/restful/account/get-balance
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a balance structure
        """
        self.load_markets()
        response = self.privateGetAccountBalances(self.extend(params))
        # {
        # "data": {
        #     "balances": [
        #     {
        #         "coin": "BTC",
        #         "free": "0.9000000",
        #         "frozen": "0.00000000"
        #     },
        #     {
        #         "coin": "USDT",
        #         "free": "100.00000000",
        #         "frozen": "900.00000000"
        #     }
        #     ]
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        return self.parse_balance(response)

    def parse_balance(self, response) -> Balances:
        # {
        # "data": {
        #     "balances": [
        #     {
        #         "coin": "BTC",
        #         "free": "0.9000000",
        #         "frozen": "0.00000000"
        #     },
        #     {
        #         "coin": "USDT",
        #         "free": "100.00000000",
        #         "frozen": "900.00000000"
        #     }
        #     ]
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        data = self.safe_dict(response, 'data', {})
        balances = self.safe_list(data, 'balances', [])
        timestamp = self.safe_string(response, 'timestamp')
        result: dict = {
            'info': balances,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
        }
        for i in range(0, len(response)):
            balance = balances[i]
            currencyId = self.safe_string(balance, 'coin')
            code = self.safe_currency_code(currencyId)
            account = self.account()
            account['free'] = self.safe_string(balance, 'free')
            frozen = self.safe_number(balance, 'frozen')
            account['total'] = (+account['free'] + str(frozen))
            result[code] = account
        return self.safe_balance(result)

    def fetch_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetches information on multiple orders made by the user
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/get-all-orders
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is None:
            limit = 50  # max = 200
        else:
            limit = min(200, limit)
        response = self.privateGetTradeAllOrders(self.extend(request, params))
        # {
        # "data": {
        #    "orders":[
        #    {
        #        # "orderId": 1234567890,
        #        # "symbol": "BTC_USDT",
        #        # "type": "LIMIT",
        #        # "side": "SELL",
        #        # "price": "30000.00",
        #        # "size": "0.1000",
        #        # "filledSize": "0.0500",
        #        # "filledAmount": "1500.00",
        #        # "fee":  "0.15",
        #        # "feeCoin":  "USDT",
        #        # "status": "OPEN",
        #        # "IOC": False,
        #        # "clientOrderId":  "9e3d93d6-e9a4-465a-a39c-2e48568fe194",
        #        # "source": "API",
        #        # "createTime": 1566676132311,
        #        # "updateTime": 1566676132311
        #     }
        #    ]
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        data = self.safe_dict(response, 'data', {})
        orders = self.safe_list(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}) -> List[Order]:
        """
        fetch all unfilled currently open orders
        :see: https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-list
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders() requires a symbol argument')
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        if limit is None:
            limit = 50  # max = 200
        else:
            limit = min(200, limit)
        response = self.privateGetTradeOpenOrders(self.extend(request, params))
        # {
        #     "data": {
        #       "orders":[
        #         {
        #           "orderId": 1234567890,
        #           "symbol": "BTC_USDT",
        #           "type": "LIMIT",
        #           "side": "SELL",
        #           "price": "30000.00",
        #           "size": "0.1000",
        #           "filledSize": "0.0500",
        #           "filledAmount": "1500.00",
        #           "fee":  "0.15",
        #           "feeCoin":  "USDT",
        #           "status": "OPEN",
        #           "IOC": False,
        #           "clientOrderId":  "9e3d93d6-e9a4-465a-a39c-2e48568fe194",
        #           "source": "API",
        #           "createTime": 1566676132311,
        #           "updateTime": 1566676132311
        #         }
        #       ]
        #     },
        #     "result": True,
        #     "timestamp": 1566676132311
        #   }
        data = self.safe_dict(response, 'data', {})
        orders = self.safe_list(data, 'orders', [])
        return self.parse_orders(orders, market, since, limit)

    def fetch_order(self, id: str, symbol: Str = None, params={}):
        """
        fetches information on an order made by the user
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/get-order
        :param str id: the order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        clientOrderId = self.safe_value_2(params, 'client_order_id', 'clientOrderId')
        request: dict = {}
        response: Any
        if clientOrderId is not None:
            request['clientOrderId'] = clientOrderId
            params = self.omit(params, ['client_order_id', 'clientOrderId'])
            response = self.privateGetTradeOrderByClientOrderId(self.extend(request, params))
        else:
            request['orderId'] = id
            response = self.privateGetTradeOrder(self.extend(request, params))
        # {
        # "data": {
        #     "orderId": 1234567890,
        #     "symbol": "BTC_USDT",
        #     "type": "LIMIT",
        #     "side": "SELL",
        #     "price": "30000.00",
        #     "size": "0.1000",
        #     "filledSize": "0.0500",
        #     "filledAmount": "1500.00",
        #     "fee":  "0.15",
        #     "feeCoin":  "USDT",
        #     "status": "OPEN",
        #     "IOC":  False,
        #     "clientOrderId":  "9e3d93d6-e9a4-465a-a39c-2e48568fe194",
        #     "source": "API",
        #     "createTime": 1566676132311,
        #     "updateTime": 1566676132311
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        data = self.safe_dict(response, 'data', {})
        return self.parse_order(data, None)

    def parse_order(self, order: dict, market: Market = None) -> Order:
        # {
        #     "orderId": 1234567890,
        #     "symbol": "BTC_USDT",
        #     "type": "LIMIT",
        #     "side": "SELL",
        #     "price": "30000.00",
        #     "size": "0.1000",
        #     "filledSize": "0.0500",
        #     "filledAmount": "1500.00",
        #     "fee":  "0.15",
        #     "feeCoin":  "USDT",
        #     "status": "OPEN",
        #     "IOC":  False,
        #     "clientOrderId":  "9e3d93d6-e9a4-465a-a39c-2e48568fe194",
        #     "source": "API",
        #     "createTime": 1566676132311,
        #     "updateTime": 1566676132311
        # }
        timestamp = self.safe_number(order, 'createTime')
        size = self.safe_number(order, 'size')
        filledSize = self.safe_number(order, 'filledSize')
        side = self.safe_string_lower(order, 'side')
        remaining = size - filledSize
        average = 0
        if filledSize:
            average = self.safe_number(order, 'filledAmount') / filledSize
        if side == 'buy':
            remaining = filledSize - size
        return self.safe_order({
            'id': self.safe_string(order, 'orderId'),
            'clientOrderId': self.safe_string(order, 'clientOrderId'),
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': self.safe_number(order, 'updateTime'),
            'status': self.safe_string_lower(order, 'status'),
            'symbol': self.safe_string(order, 'symbol').replace('_', '/'),
            'type': self.safe_string_lower(order, 'type'),
            'timeInForce': None,
            'postOnly': self.safe_bool(order, 'IOC'),
            'side': side,
            'price': self.safe_number(order, 'price'),
            'stopPrice': None,
            'triggerPrice': self.safe_number(order, 'price'),
            'amount': size,
            'filled': filledSize,
            'remaining': remaining,
            'cost': self.safe_number(order, 'fee'),
            'trades': None,
            'average': average,
            'fee': {
                'currency': self.safe_string(order, 'feeCoin'),
                'cost': self.safe_string(order, 'fee'),
            },
            'info': order,
        }, market)

    def fetch_my_trades(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetch all trades made by the user
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/get-fills
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        response = self.privateGetTradeFills(self.extend(request, params))
        # {
        # "data": {
        #     "fills":[
        #     {
        #         "id": 9876543210,
        #         "orderId": 123456789,
        #         "symbol": "BTC_USDT",
        #         "side": "SELL",
        #         "role":  "TAKER",
        #         "price": "30000.00",
        #         "size": "0.1000",
        #         "fee":  "0.15",
        #         "feeCoin":  "USDT",
        #         "timestamp": 1566676132311
        #     },
        #     {
        #         "id": 9876543200,
        #         "orderId": 123456789,
        #         "symbol": "BTC_USDT",
        #         "side": "SELL",
        #         "role":  "TAKER",
        #         "price": "29000.00",
        #         "size": "0.1200",
        #         "fee":  "0.145",
        #         "feeCoin":  "USDT",
        #         "timestamp": 1566676132310
        #     }
        #     ]
        # },
        # "result": True,
        # "timestamp": 1566691672311
        # }
        data = self.safe_dict(response, 'data', {})
        fills = self.safe_list(data, 'fills', [])
        return self.parse_trades(fills, market, since, limit)

    def fetch_order_trades(self, id: str, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetch all the trades made from a single order
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/get-fills-by-order-id
        :param str id: order id
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        self.load_markets()
        market = self.safe_market(symbol)
        request: dict = {
            'orderId': id,
        }
        response = self.privateGetTradeFillsByOrderId(self.extend(request, params))
        # {
        #     "data": {
        #       "fills":[
        #         {
        #           "id": 9876543210,
        #           "orderId": 22334455,
        #           "symbol": "BTC_USDT",
        #           "side": "BUY",
        #           "role":  "TAKER",
        #           "price": "30000.00",
        #           "size": "0.1000",
        #           "fee":  "0.15",
        #           "feeCoin":  "USDT",
        #           "timestamp": 1566676132311
        #         },
        #         {
        #           "id": 9876543200,
        #           "orderId": 22334455,
        #           "symbol": "BTC_USDT",
        #           "side": "BUY",
        #           "role":  "TAKER",
        #           "price": "29000.00",
        #           "size": "0.1200",
        #           "fee":  "0.145",
        #           "feeCoin":  "USDT",
        #           "timestamp": 1566676132310
        #         }
        #       ]
        #     },
        #     "result": True,
        #     "timestamp": 1566691672311
        #   }
        data = self.safe_dict(response, 'data')
        fills = self.safe_list(data, 'fills', [])
        return self.parse_trades(fills, market, since, limit)

    def cancel_order(self, id: str, symbol: Str = None, params={}):
        """
        cancels an open order
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/cancel-order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
            'orderId': id,
        }
        self.privateDeleteTradeOrder(self.extend(request, params))
        # {
        # "result": True,
        # "timestamp": 1566691672311
        # }
        order = self.safe_order({'id': id, 'symbol': market['id'], 'info': {}}, market)
        return order

    def cancel_all_orders(self, symbol: Str = None, params={}):
        """
        cancel all open orders in a market
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/cancel-all-orders
        :param str symbol: unified market symbol of the market to cancel orders in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request: dict = {
            'symbol': market['id'],
        }
        self.privateDeleteTradeAllOrders(self.extend(request, params))
        #  {
        #  "result": True,
        #  "timestamp": 1566691672311
        #  }
        order = self.safe_order({'symbol': market['id'], 'info': {}}, market)
        return [order]

    def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num = None, params={}):
        """
        create a trade order
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/new-order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        clientOrderId = self.safe_string_2(params, 'client_order_id', 'clientOrderId', self.uuid())
        request: dict = {
            'symbol': market['id'],
            'side': side.upper(),
            'type': type.upper(),
            'amount': self.amount_to_precision(symbol, amount),
            'size': self.amount_to_precision(symbol, amount),
            'IOC': self.safe_bool(params, 'postOnly', False),
            'clientOrderId': clientOrderId,
        }
        if price:
            request['price'] = price
        response = self.privatePostTradeOrder(self.extend(request, params))
        # {
        #     "data": {
        #         "orderId": 1234567890,
        #         "clientOrderId":  "9e3d93d6-e9a4-465a-a39c-2e48568fe194"
        #     },
        #     "result": True,
        #     "timestamp": 1566691672311
        # }
        data = self.safe_dict(response, 'data', {})
        request['orderId'] = data['orderId']
        return self.parse_order(request, market)

    def create_orders(self, orders: List[OrderRequest], params={}):
        """
        create a list of trade orders
        :see: https://pionex-doc.gitbook.io/apidocs/restful/orders/new-multiple-order
        :param Array orders: list of orders to create, each object should contain the parameters required by createOrder, namely symbol, type, side, amount, price and params
        :param dict [params]:  extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        ordersRequests = []
        for i in range(0, len(orders)):
            rawOrder = orders[i]
            symbol = self.safe_string(rawOrder, 'symbol')
            type = self.safe_string(rawOrder, 'type')
            side = self.safe_string_upper(rawOrder, 'side')
            amount = self.safe_number(rawOrder, 'amount')
            price = self.safe_number(rawOrder, 'price')
            orderParams = self.safe_dict(rawOrder, 'params', {})
            orderRequest = self.create_order_request(symbol, type, side, amount, price, orderParams)
            ordersRequests.append(orderRequest)
        firstOrder = ordersRequests[0]
        firstSymbol = self.safe_string(firstOrder, 'symbol')
        request: dict = {
            'symbol': firstSymbol,
            'orders': ordersRequests,
        }
        response = self.privatePostTradeMassOrder(self.extend(request, params))
        data = self.safe_dict(response, 'data', {})
        orderIds = self.safe_list(data, 'orderIds', [])
        responseOrders = []
        for i in range(0, len(orderIds)):
            responseOrder = self.safe_dict(orderIds, i, {})
            orderRequests = self.safe_dict(ordersRequests, i, {})
            orderRequests['orderId'] = responseOrder['orderId']
            responseOrders.append(orderRequests)
        return self.parse_orders(responseOrders)

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        endpointPath = '/api/v1/' + self.implode_params(path, params)
        url = self.urls['api'][api] + endpointPath
        params = self.omit(params, self.extract_params(path))
        if params and method == 'GET' and api != 'private':
            url += '?' + self.urlencode(params)
        if api == 'private':
            if params and (method == 'POST' or method == 'DELETE'):
                body = self.json(params)
            params['timestamp'] = self.milliseconds()
            url += '?' + self.urlencode(params)
            sortedParams = self.keysort(params)
            structedPath = method + endpointPath + '?' + self.urlencode(sortedParams)
            if body:
                structedPath = structedPath + body
            signature = self.hmac(self.encode(structedPath), self.encode(self.secret), hashlib.sha256)
            headers = {
                'Content-Type': 'application/json',
                'PIONEX-KEY': self.apiKey,
                'PIONEX-SIGNATURE': signature,
            }
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code: int, reason: str, url: str, method: str, headers: dict, body: str, response, requestHeaders, requestBody):
        if response is None:
            return None  # fallback to the default error handler
        feedback = self.id + ' ' + body
        status = self.safe_number(response, 'status', 200)
        if status > 200:
            statusStr = str(status)
            self.throw_exactly_matched_exception(
                self.exceptions['exact'],
                statusStr,
                feedback
            )
            self.throw_broadly_matched_exception(
                self.exceptions['broad'],
                statusStr,
                feedback
            )
        return None

    def create_order_request(self, symbol: Str, type: OrderType, side: OrderSide, amount: Num, price: Num = None, params={}):
        market = self.market(symbol)
        clientOrderId = self.safe_string_2(params, 'client_order_id', 'clientOrderId', self.uuid())
        params = self.omit(params, ['client_order_id', 'clientOrderId'])
        request: dict = {
            'clientOrderId': clientOrderId,
            'side': side,
            'symbol': market['id'],
            'type': 'LIMIT',  # Only support LIMIT.
            'size': self.amount_to_precision(symbol, amount),
            'price': price,
        }
        return self.extend(request, params)
